events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 172.26.0.11 ipv6=off;

  lua_ssl_trusted_certificate /opt/local/etc/openssl/cert.pem;
  lua_ssl_verify_depth 5;

  # cache for validation results
  lua_shared_dict introspection 10m;

  log_format  main  '$remote_addr - $sub [$time_local] "$request" '
                  '$status $body_bytes_sent $upstream_connect_time $upstream_header_time '
                  '$upstream_response_time $upstream_response_time "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" [$username]';

  # access_log  /var/log/access.log  main;
  access_log /usr/local/openresty/nginx/logs/access.log main;

  server {
    listen 80;
    server_name ${server_name};

    error_log  stderr  info;
    rewrite_log on;
    client_max_body_size 20000M;
    proxy_send_timeout      120;
    proxy_read_timeout      120;
    proxy_request_buffering off;
    proxy_buffering         off;
    proxy_http_version      1.1;
    proxy_max_temp_file_size 0;

    set $sub '-';
    set $username '-';

    location / {
      proxy_pass http://irdbbui:80;
      proxy_redirect http://irdbbui:80 https://${server_name};
    }

    location /sparklis {
      proxy_pass http://sparklis:80;
      proxy_redirect http://sparklis:80 https://${server_name}/sparklis;
    }

    location /rdftriplestore {
      access_by_lua '
        ngx.var.username=ngx.var.cookie_user_name
        ngx.log(ngx.INFO, "Location : SPARKLIS")
        local opts = {
           ssl_verify = "no",
           introspection_endpoint="https://keycloak.kheops.online/auth/realms/irdbb/protocol/openid-connect/token/introspect",
           client_id="introspect",
           client_secret="${client_secret}",
           auth_accept_token_as = "cookie:access_token",
        }
        local res, err = require("resty.openidc").introspect(opts)

        if err then
          ngx.log(ngx.INFO, err)
          ngx.status = 403
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      ';

      rewrite ^(/rdftriplestore)(.*)$ /ontoMedirad/query$2 break;
      proxy_pass http://sparklis:80;
    }

    location /fhir {
      access_by_lua '
        ngx.var.username=ngx.var.cookie_user_name
        ngx.log(ngx.INFO, "Location : FHIR")
        local opts = {
           ssl_verify = "no",
           introspection_endpoint="https://keycloak.kheops.online/auth/realms/irdbb/protocol/openid-connect/token/introspect",
           client_id="introspect",
           client_secret="${client_secret}",
           auth_accept_token_as = "cookie:access_token",
        }
        local res, err = require("resty.openidc").introspect(opts)

        if err then
          ngx.log(ngx.INFO, err)
          ngx.status = 403
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      ';

      rewrite ^(/fhir)(.*)$ /baseDstu3$2 break;
      proxy_pass http://fhir:8080;
    }

    location /pacs {
      access_by_lua '
        ngx.var.username=ngx.var.cookie_user_name
        ngx.log(ngx.INFO, "Location : PACS")
        local opts = {
           ssl_verify = "no",
           introspection_endpoint="https://keycloak.kheops.online/auth/realms/irdbb/protocol/openid-connect/token/introspect",
           client_id="introspect",
           client_secret="${client_secret}",
           auth_accept_token_as = "cookie:access_token",
        }
        local res, err = require("resty.openidc").introspect(opts)

        if err then
          ngx.log(ngx.INFO, err)
          ngx.status = 403
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      ';

      rewrite ^(/pacs)(.*)$ /dcm4chee-arc/aets/DCM4CHEE/rs$2 break;
      proxy_pass http://pacsarc:8080;
    }

    location /semanticTranslator {
      access_by_lua '
        ngx.var.username=ngx.var.cookie_user_name
        ngx.log(ngx.INFO, "Location : SEMANTIC TRANSLATOR")
        local opts = {
           ssl_verify = "no",
           introspection_endpoint="https://keycloak.kheops.online/auth/realms/irdbb/protocol/openid-connect/token/introspect",
           client_id="introspect",
           client_secret="${client_secret}",
           auth_accept_token_as = "cookie:access_token",
        }
        local res, err = require("resty.openidc").introspect(opts)

        if err then
          ngx.log(ngx.INFO, err)
          ngx.status = 403
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      ';

      rewrite ^(/semanticTranslator)(.*)$ $2 break;
      proxy_pass http://semantictranslator:8090;
    }
  }
}
